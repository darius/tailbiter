file_input: (NEWLINE | stmt)* ENDMARKER

stmt: simple_stmt | compound_stmt

compound_stmt: if_stmt | while_stmt | for_stmt | funcdef | classdef | decorated

if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
while_stmt: 'while' test ':' suite
for_stmt: 'for' exprlist 'in' testlist ':' suite

suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

decorated: decorator+ funcdef
decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE

funcdef: 'def' NAME parameters ':' suite
parameters: '(' [argslist] ')'
argslist: (NAME (',' NAME)* [','
      ['*' NAME [',' '**' NAME] | '**' NAME]]
     | '*' NAME [',' '**' NAME] | '**' NAME)

classdef: 'class' NAME ['(' [arglist] ')'] ':' suite
arglist: (argument ',')* (argument [',']
                         |'*' test (',' argument)* [',' '**' test] 
                         |'**' test)
argument: test [comp_for] | test '=' test

simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: expr_stmt | flow_stmt | import_stmt | assert_stmt
expr_stmt: testlist_expr ('=' testlist_expr)*
testlist_expr: test (',' test)* [',']

flow_stmt: return_stmt | raise_stmt
return_stmt: 'return' [testlist]
raise_stmt: 'raise' [test]

import_stmt: import_name | import_from
import_name: 'import' dotted_as_names
import_from: ('from' ('.'* dotted_name | '.'+)
              'import' ('(' import_as_names ')' | import_as_names))
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)*
import_as_name: NAME ['as' NAME]
dotted_as_name: dotted_name ['as' NAME]
dotted_name: NAME ('.' NAME)*

assert_stmt: 'assert' test [',' test]

test: or_test ['if' or_test 'else' test] | lambdef
test_nocond: or_test | lambdef_nocond

lambdef: 'lambda' [argslist] ':' test
lambdef_nocond: 'lambda' [argslist] ':' test_nocond

or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison

comparison: expr (comp_op expr)*
comp_op: '<'|'>'|'=='|'>='|'<='|'!='|'in'|'not' 'in'|'is'|'is' 'not'

expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power
power: atom trailer* ['**' factor]

atom: ('[' [testlist_comp] ']' |
       NAME | NUMBER | STRING+ | 'None' | 'True' | 'False')

trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME

subscriptlist: subscript (',' subscript)* [',']
subscript: test

testlist_comp: test ( comp_for | (',' test)* [','] )
comp_for: 'for' exprlist 'in' or_test [comp_iter]
comp_iter: comp_for | comp_if
comp_if: 'if' test_nocond [comp_iter]

exprlist: expr (',' expr)* [',']
testlist: test (',' test)* [',']
